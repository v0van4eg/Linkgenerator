Дерево каталога: /home/poly/PythonProjects/linkgenerator

├── app.py
├── config.py
├── nginx.conf
├── requirements.txt
├── static
│   └── style.css
├── templates
│   └── index.html
├── uploads
├── Задача.txt


СОДЕРЖИМОЕ ФАЙЛОВ:

##################################### app.py #####################################
from flask import Flask, render_template, request, jsonify, send_file
import os
import uuid
from werkzeug.utils import secure_filename
from config import Config, allowed_file

app = Flask(__name__)
app.config.from_object(Config)

# Создаем директорию для загрузок если не существует
os.makedirs(Config.UPLOAD_FOLDER, exist_ok=True)


@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        # Получаем данные из формы
        client_name = request.form.get('client_name', '').strip()
        product_name = request.form.get('product_name', '').strip()

        if not client_name or not product_name:
            return render_template('index.html', error='Заполните все поля')

        # Создаем пути для клиента и товара
        client_folder = secure_filename(client_name)
        product_folder = secure_filename(product_name)
        full_path = os.path.join(Config.UPLOAD_FOLDER, client_folder, product_folder)
        os.makedirs(full_path, exist_ok=True)

        uploaded_files = request.files.getlist('images')
        image_urls = []

        for file in uploaded_files:
            if file and allowed_file(file.filename):
                # Генерируем уникальное имя файла
                file_extension = os.path.splitext(file.filename)[1]
                unique_filename = f"{uuid.uuid4().hex}{file_extension}"

                # Сохраняем файл
                file_path = os.path.join(full_path, unique_filename)
                file.save(file_path)

                # Генерируем URL
                image_url = f"{Config.BASE_URL}/images/{client_folder}/{product_folder}/{unique_filename}"
                image_urls.append(image_url)

        return render_template('index.html',
                               image_urls=image_urls,
                               client_name=client_name,
                               product_name=product_name)

    return render_template('index.html')


@app.route('/download-links')
def download_links():
    urls = request.args.getlist('urls')
    if not urls:
        return "No URLs provided", 400

    # Создаем временный файл
    temp_file = f"temp_links_{uuid.uuid4().hex}.txt"
    with open(temp_file, 'w', encoding='utf-8') as f:
        f.write(', '.join(urls))

    return send_file(temp_file,
                     as_attachment=True,
                     download_name='image_links.txt',
                     mimetype='text/plain')


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)


##################################### config.py #####################################
import os

class Config:
    SECRET_KEY = 'your-secret-key-here'
    UPLOAD_FOLDER = 'uploads'
    MAX_CONTENT_LENGTH = 1 * 1024 * 1024 * 1024 # 1GB max file size
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'webp'}
    BASE_URL = 'http://localhost'  # Замените на ваш домен

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in Config.ALLOWED_EXTENSIONS


##################################### nginx.conf #####################################
server {
    listen 80;
    server_name your-domain.com;  # Замените на ваш домен

    # Статические файлы приложения
    location /static/ {
        alias /path/to/your/image_hosting/static/;
        expires 30d;
    }

    # Обслуживание загруженных изображений
    location /images/ {
        alias /path/to/your/image_hosting/uploads/;
        expires 30d;
        add_header Cache-Control "public, immutable";

        # Разрешаем CORS если нужно
        add_header Access-Control-Allow-Origin "*";
    }

    # Проксирование запросов к Flask приложению
    location / {
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}


##################################### requirements.txt #####################################
Flask
Werkzeug


##################################### Задача.txt #####################################
Написать веб приложение на Python. Хостинг картинок для вставки ссылок в документы.
Пользователь загружает через форму картинки. Файлы сохраняются в каталог с именем клиента, который указывается на
странице. Так же указывается имя товара. Генерируются прямые ссылки для каждого файла и выводятся в правой
части страницы в столбик.
Сгенерированные ссылки можно копировать в буфер обмена.
Так же ссылки можно выгрузить в txt-файл в виде списка через запятую с пробелом.
Каталог с картинками обслуживается веб-сервером Nginx.

##################################### static/style.css #####################################
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Arial', sans-serif;
    line-height: 1.6;
    color: #333;
    background-color: #f4f4f4;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    display: flex;
    gap: 30px;
}

.upload-section {
    flex: 1;
    background: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.links-section {
    flex: 1;
    background: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

h1 {
    text-align: center;
    margin-bottom: 30px;
    color: #2c3e50;
}

.form-group {
    margin-bottom: 20px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #555;
}

input[type="text"],
input[type="file"] {
    width: 100%;
    padding: 10px;
    border: 2px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
}

input[type="text"]:focus {
    border-color: #3498db;
    outline: none;
}

.btn {
    background: #3498db;
    color: white;
    padding: 12px 30px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background 0.3s;
}

.btn:hover {
    background: #2980b9;
}

.btn-secondary {
    background: #95a5a6;
}

.btn-secondary:hover {
    background: #7f8c8d;
}

.url-list {
    max-height: 400px;
    overflow-y: auto;
}

.url-item {
    background: #f8f9fa;
    padding: 15px;
    margin-bottom: 10px;
    border-radius: 5px;
    border-left: 4px solid #3498db;
}

.url-text {
    word-break: break-all;
    margin-bottom: 10px;
    font-family: monospace;
    font-size: 14px;
}

.url-actions {
    display: flex;
    gap: 10px;
}

.error {
    background: #e74c3c;
    color: white;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 20px;
}

.success {
    background: #27ae60;
    color: white;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 20px;
}

.bulk-actions {
    margin-top: 20px;
    text-align: center;
}

@media (max-width: 768px) {
    .container {
        flex-direction: column;
    }
}


##################################### templates/index.html #####################################
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Хостинг картинок</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <div class="container">
        <div class="upload-section">
            <h1>Загрузка изображений</h1>

            {% if error %}
            <div class="error">{{ error }}</div>
            {% endif %}

            <form method="POST" enctype="multipart/form-data">
                <div class="form-group">
                    <label for="client_name">Имя клиента:</label>
                    <input type="text" id="client_name" name="client_name"
                           value="{{ client_name or '' }}" required>
                </div>

                <div class="form-group">
                    <label for="product_name">Имя товара:</label>
                    <input type="text" id="product_name" name="product_name"
                           value="{{ product_name or '' }}" required>
                </div>

                <div class="form-group">
                    <label for="images">Изображения:</label>
                    <input type="file" id="images" name="images"
                           multiple accept="image/*" required>
                </div>

                <button type="submit" class="btn">Загрузить изображения</button>
            </form>
        </div>

        <div class="links-section">
            <h1>Сгенерированные ссылки</h1>

            {% if image_urls %}
            <div class="url-list" id="urlList">
                {% for url in image_urls %}
                <div class="url-item">
                    <div class="url-text">{{ url }}</div>
                    <div class="url-actions">
                        <button class="btn" onclick="copyToClipboard('{{ url }}')">
                            Копировать
                        </button>
                    </div>
                </div>
                {% endfor %}
            </div>

            <div class="bulk-actions">
                <button class="btn btn-secondary" onclick="downloadAllLinks()">
                    Скачать все ссылки (TXT)
                </button>
                <button class="btn btn-secondary" onclick="copyAllToClipboard()">
                    Копировать все ссылки
                </button>
            </div>
            {% else %}
            <p>Загрузите изображения, чтобы увидеть ссылки</p>
            {% endif %}
        </div>
    </div>

    <script>
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(function() {
                alert('Ссылка скопирована в буфер обмена!');
            }, function(err) {
                // Fallback для старых браузеров
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                alert('Ссылка скопирована в буфер обмена!');
            });
        }

        function copyAllToClipboard() {
            const urlItems = document.querySelectorAll('.url-text');
            const allUrls = Array.from(urlItems).map(item => item.textContent);
            const text = allUrls.join(', ');
            copyToClipboard(text);
        }

        function downloadAllLinks() {
            const urlItems = document.querySelectorAll('.url-text');
            const allUrls = Array.from(urlItems).map(item => item.textContent);

            if (allUrls.length === 0) {
                alert('Нет ссылок для скачивания');
                return;
            }

            // Создаем URL параметры для передачи ссылок
            const params = new URLSearchParams();
            allUrls.forEach(url => params.append('urls', url));

            // Скачиваем файл
            window.location.href = '/download-links?' + params.toString();
        }
    </script>
</body>
</html>

